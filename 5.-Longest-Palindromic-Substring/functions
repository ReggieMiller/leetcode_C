int mid(int i)
{
    return i/2-((i%2)?0:1);
}
char* longestPalindrome(char* s) {
    int count =1;
    int max = 0;
    int midCount=0,midflag = 0;
    int leftCount = 0,leftflag = 0;
    char longestPa[1001] = {0};
    char *ca;
    
    if(strlen(s) == 1)
    {
        return s;
    }
    
    for(int i= mid(strlen(s)); i>=max/2 && i < strlen(s)-max/2 ; i += count*pow(-1,(count++)+1)) //从中间开始查找(快10倍)
    //for(int i = 0 ; i < strlen(s) ; i++) //从头开始查找
    {
        midflag = 0;
        leftflag = 0;
       
        for(int j = 1; j <= i +1 && i+j < strlen(s) ;j++)
        {
            if(midflag == 0 && i >= j)
            {
                if(s[i-j] == s[i+j])
                {
                    midCount++; 
                }
                else
                {
                    midflag = 1;
                }
            }
            
            if(leftflag == 0)
            {
                if(s[i-j+1] == s[i+j])
                {
                    leftCount++; 
                }
                else
                {
                    leftflag = 1;
                }    
            }
            if(leftflag == 1 && midflag ==1)
            {
                break;
            }
        }
        
        if(midCount >= leftCount)
        {
            if(midCount*2+1 >= max)
            {
                max = midCount*2+1;
                memcpy(longestPa,&s[i-midCount],midCount*2+1);  
            }
        }
        else
        {
            if(leftCount*2 >= max)
            {
                max = leftCount*2;
                memcpy(longestPa,&s[i-leftCount+1],leftCount*2);  
            }
        }
        
        midCount = 0;
        leftCount =0;
    }
    ca = (char *)malloc((max+1)*sizeof(char));
    memset(ca,0,sizeof(ca));
    strncpy(ca,longestPa,max);
    ca[max] ='\0';    
    
    return ca;
}
